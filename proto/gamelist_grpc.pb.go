// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameScrapeClient is the client API for GameScrape service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameScrapeClient interface {
	ScrapeGames(ctx context.Context, in *Empty, opts ...grpc.CallOption) (GameScrape_ScrapeGamesClient, error)
}

type gameScrapeClient struct {
	cc grpc.ClientConnInterface
}

func NewGameScrapeClient(cc grpc.ClientConnInterface) GameScrapeClient {
	return &gameScrapeClient{cc}
}

func (c *gameScrapeClient) ScrapeGames(ctx context.Context, in *Empty, opts ...grpc.CallOption) (GameScrape_ScrapeGamesClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameScrape_ServiceDesc.Streams[0], "/proto.GameScrape/ScrapeGames", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameScrapeScrapeGamesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GameScrape_ScrapeGamesClient interface {
	Recv() (*GameProperties, error)
	grpc.ClientStream
}

type gameScrapeScrapeGamesClient struct {
	grpc.ClientStream
}

func (x *gameScrapeScrapeGamesClient) Recv() (*GameProperties, error) {
	m := new(GameProperties)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameScrapeServer is the server API for GameScrape service.
// All implementations must embed UnimplementedGameScrapeServer
// for forward compatibility
type GameScrapeServer interface {
	ScrapeGames(*Empty, GameScrape_ScrapeGamesServer) error
	mustEmbedUnimplementedGameScrapeServer()
}

// UnimplementedGameScrapeServer must be embedded to have forward compatible implementations.
type UnimplementedGameScrapeServer struct {
}

func (UnimplementedGameScrapeServer) ScrapeGames(*Empty, GameScrape_ScrapeGamesServer) error {
	return status.Errorf(codes.Unimplemented, "method ScrapeGames not implemented")
}
func (UnimplementedGameScrapeServer) mustEmbedUnimplementedGameScrapeServer() {}

// UnsafeGameScrapeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameScrapeServer will
// result in compilation errors.
type UnsafeGameScrapeServer interface {
	mustEmbedUnimplementedGameScrapeServer()
}

func RegisterGameScrapeServer(s grpc.ServiceRegistrar, srv GameScrapeServer) {
	s.RegisterService(&GameScrape_ServiceDesc, srv)
}

func _GameScrape_ScrapeGames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameScrapeServer).ScrapeGames(m, &gameScrapeScrapeGamesServer{stream})
}

type GameScrape_ScrapeGamesServer interface {
	Send(*GameProperties) error
	grpc.ServerStream
}

type gameScrapeScrapeGamesServer struct {
	grpc.ServerStream
}

func (x *gameScrapeScrapeGamesServer) Send(m *GameProperties) error {
	return x.ServerStream.SendMsg(m)
}

// GameScrape_ServiceDesc is the grpc.ServiceDesc for GameScrape service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameScrape_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GameScrape",
	HandlerType: (*GameScrapeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ScrapeGames",
			Handler:       _GameScrape_ScrapeGames_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gamelist.proto",
}
